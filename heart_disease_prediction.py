# -*- coding: utf-8 -*-
"""Heart Disease prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RVLotX9dKegtEjS4eVi1L_rDz8QPc-Iy

Importing dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Collection and Processing"""

# Loading the csv data to a Pandas data Frame
heart_data = pd.read_csv('/content/heart.csv')

"""cp-cerebral plassy
trestbps-resting blood pressure
chol-cholestrol
fbs-fasting blood sugar
restecg-resting electrocardiograph
thalach-maximun heart rate achieved
exang-exercise induced angina
oldpeak, slope-depression induced by exercise
ca-coronary artery calcium thalassemia

"""

# Print 1st 5 rows of the dataset
heart_data.head()

# print last 5 rows of the dataset
heart_data.tail()

# Number of rows and columns in the dataset
heart_data.shape

# Getting more about the data
heart_data.info()

# Checking for missing values
heart_data.isnull().sum()

# Statistical measures about the data
heart_data.describe()

# Checking the distribution of Target Variable
heart_data['target'].value_counts()

"""1 --> Defective heart
0 --> Healthy heart

Splitting the features and target
"""

X = heart_data.drop(columns='target', axis=1)
Y = heart_data['target']

print(X)

print(Y)

"""Splitting the data into Training data and Test data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y,random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""Model Training

Logistic Regression Model
"""

model = LogisticRegression()

# Training the Logistic Regression model with training data
model.fit(X_train, Y_train)

"""Model Evaluation

Accuracy Score
"""

# Accuracy on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction,Y_train)

print("Accuracy on Training data: ",training_data_accuracy)

# Accuracy on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction,Y_test)

print("Accuracy on Test data: ",test_data_accuracy)

"""Building a Predictive System"""

input_data = (34,0,1,118,210,0,1,192,0,0.7,2,0,2)

# Changing the input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

# Reshaping the numpy array as we are predicting only foe one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1, -1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if(prediction[0] == 0):
  print("The person's heart is Healthy")
else:
  print("The person has heart disease")